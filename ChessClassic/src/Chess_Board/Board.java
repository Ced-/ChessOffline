/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Chess_Board;
import Chess_FiguresAndFields.*;
import java.awt.event.ActionEvent;


/**
 *
 * @author Lucas
 */
public class Board extends javax.swing.JPanel implements Cloneable{
    public Board clone() throws CloneNotSupportedException 
    {  
        return (Board)super.clone();  
    }  
    
    private String whosTurn=TYPE_COLORS.WHITE_COLOR;
    private Chessfigure activeFigure=null;
            
            
            
    public final static int BOARDWIDTH=640;
    private final int FIELDWIDTH=BOARDWIDTH/8;
   private Chess_FiguresAndFields.Field[][] Fields =new Field[8][8];
 

    public Board() {
        initComponents();
     this.setBounds(0, 0, BOARDWIDTH+40, BOARDWIDTH+40);
        int colorcounter=-1;
        for (int y=0; y<Fields.length; y++)
        {
            colorcounter++;
            for (int x=0; x<Fields[y].length; x++)
            {
                String color=(colorcounter%2==0)? TYPE_COLORS.WHITE_COLOR:TYPE_COLORS.BLACK_COLOR;
                Fields[x][y]=new Field(null,x,y,color);
                Fields[x][y].addActionListener((new java.awt.event.ActionListener() 
                {

                    @Override
                    public void actionPerformed(ActionEvent evt) 
                    {
                       
                        Chessfigure tempfigure=((Field)evt.getSource()).getFigure();
                                    if (tempfigure==activeFigure)
                                    {
                                        //System.out.println(2221);
                                        activeFigure=null;
                                        ((Field)evt.getSource()).setColor("default");
                                    }
                                    else if (tempfigure!=null && activeFigure==null)
                                    {
                                       
                                        if (tempfigure.getColor().equalsIgnoreCase(whosTurn))
                                        {
                                            activeFigure=tempfigure;
                                            ((Field)evt.getSource()).setColor(TYPE_COLORS.BLUE_COLOR);
                                        }
                                    }
                                    
                                    if(activeFigure!=null && activeFigure!=tempfigure)
                                    {
                                        if (activeFigure.manualMove((Field)evt.getSource()))
                                        {
                                          //  System.out.println("test1");
                                            nextTurn();
                                        }
                                    }

                                    
                    
                          
                          }
                    
                }));
                this.add(Fields[x][y]);
                Fields[x][y].setBounds(x*FIELDWIDTH, y*FIELDWIDTH, FIELDWIDTH, FIELDWIDTH);
                
                
                colorcounter++;
            }
        }
        makeFirstFigures();
    }
    
    private void nextTurn()
    {
        whosTurn=(whosTurn.equals(TYPE_COLORS.WHITE_COLOR)) ? TYPE_COLORS.BLACK_COLOR:TYPE_COLORS.WHITE_COLOR;
        activeFigure=null;
    }
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(8, 8));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    
    private void makeFirstFigures()
    {
        Chessfigure figure;
        figure=new FigureTower(Fields[0][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureTower(Fields[7][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureJumper(Fields[1][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureJumper(Fields[6][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureRunner(Fields[2][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureRunner(Fields[5][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureQueen(Fields[3][0],TYPE_COLORS.BLACK_COLOR, this);
        figure=new FigureKing(Fields[4][0],TYPE_COLORS.BLACK_COLOR, this);
        
        figure=new FigureTower(Fields[0][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureTower(Fields[7][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureJumper(Fields[1][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureJumper(Fields[6][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureRunner(Fields[2][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureRunner(Fields[5][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureQueen(Fields[3][7],TYPE_COLORS.WHITE_COLOR, this);
        figure=new FigureKing(Fields[4][7],TYPE_COLORS.WHITE_COLOR, this);
        
        for (int i=0; i<8; i++)
        {
            figure=new FigurePawn(Fields[i][1],TYPE_COLORS.BLACK_COLOR, this);
        }
        for (int i=0; i<8; i++)
        {
            figure=new FigurePawn(Fields[i][6],TYPE_COLORS.WHITE_COLOR, this);
        }
        
    }
         
    
    public Field getField(int x, int y)
    {
        if (x>Fields.length-1||y>Fields[x].length-1)
        {
            return null;
        }
        else
        {
            return Fields[x][y];
        }
    }


}
